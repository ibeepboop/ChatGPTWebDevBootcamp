Daily Tests for the 12-Week Full Stack Web Developer Bootcamp
Week 1-2: Introduction to Web Development
Week 1: HTML & CSS Basics

Day 1: HTML Basics

Test:
Create a simple HTML document with a header, paragraph, and an unordered list.
Identify and explain the purpose of at least five different HTML tags.
Day 2: HTML5 Semantic Elements

Test:
Create an HTML document using semantic elements (header, nav, section, article, footer).
Explain the benefits of using semantic elements.
Day 3: CSS Basics

Test:
Apply basic CSS styles (color, font-size, margin, padding) to an HTML document.
Explain the difference between inline, internal, and external CSS.
Day 4: CSS Box Model

Test:
Create a styled box with specific width, height, padding, border, and margin.
Explain how the box model affects element layout.
Day 5: Flexbox Basics

Test:
Create a layout using Flexbox with horizontal and vertical alignment.
Explain the difference between justify-content and align-items.
Day 6: Grid Layout Basics

Test:
Create a grid layout with three columns and two rows.
Explain how grid-template-rows and grid-template-columns work.
Day 7: Portfolio Website

Test:
Structure the basic layout of your portfolio website.
Ensure it includes at least a header, navigation, main content area, and footer.
Week 2: Advanced CSS & Responsive Design

Day 8: Advanced CSS

Test:
Create an animation using CSS transitions.
Explain the difference between transition and animation properties.
Day 9: Media Queries

Test:
Create a responsive layout using media queries.
Explain how media queries help in making a website responsive.
Day 10: Flexbox Advanced Techniques

Test:
Create a complex layout using nested Flexbox containers.
Explain the use of flex-grow, flex-shrink, and flex-basis.
Day 11: Grid Layout Advanced Techniques

Test:
Create a responsive grid layout with different column spans for different screen sizes.
Explain the use of grid-area and grid-template-areas.
Day 12: Responsive Design Practice

Test:
Modify an existing layout to be fully responsive.
Explain the importance of responsive design.
Day 13: Finalize Portfolio Website

Test:
Add final styling touches to your portfolio website.
Ensure all content is accessible and well-organized.
Day 14: Project Review and Submission

Test:
Submit your portfolio website for review.
Self-assess your work using the provided rubric.
Week 3-4: JavaScript Basics
Week 3: JavaScript Fundamentals

Day 15: JavaScript Basics

Test:
Write a JavaScript program to declare variables of different types and log their values.
Explain the difference between let, const, and var.
Day 16: Control Structures

Test:
Write a JavaScript program using if-else and switch-case statements.
Explain the difference between if-else and switch-case.
Day 17: Loops

Test:
Write a JavaScript program using for, while, and do-while loops.
Explain the use cases for each type of loop.
Day 18: Functions and Scope

Test:
Write a JavaScript function and call it with different arguments.
Explain the difference between function scope and block scope.
Day 19: DOM Manipulation

Test:
Write a JavaScript program to change the content of an HTML element.
Explain how document.getElementById and document.querySelector work.
Day 20: Event Handling

Test:
Write a JavaScript program to handle click events on a button.
Explain how event propagation works in JavaScript.
Day 21: To-Do List Setup

Test:
Set up the basic HTML and CSS for the to-do list application.
Explain the purpose of each element and style.
Week 4: Advanced JavaScript

Day 22: ES6 Basics

Test:
Rewrite a JavaScript function using arrow functions.
Explain the use of template literals.
Day 23: Advanced ES6 Features

Test:
Write a JavaScript program using spread and rest operators.
Explain the difference between the two.
Day 24: Promises and Async/Await

Test:
Write a JavaScript program using Promises.
Convert the program to use async/await.
Day 25: Error Handling

Test:
Write a JavaScript program with error handling using try-catch.
Explain how error handling improves code reliability.
Day 26: Fetch API

Test:
Write a JavaScript program to fetch data from a public API and display it.
Explain how the Fetch API works.
Day 27: Finalize To-Do List

Test:
Add advanced features to the to-do list (e.g., edit, delete).
Ensure all features work as expected.
Day 28: Project Review and Submission

Test:
Submit your to-do list application for review.
Self-assess your work using the provided rubric.
Week 5-6: Advanced JavaScript and Front-End Frameworks
Week 5: Advanced JavaScript & React Introduction

Day 29: Introduction to React

Test:
Create a simple React component and render it.
Explain the purpose of JSX in React.
Day 30: Props and State

Test:
Pass props to a React component and use state to manage component data.
Explain the difference between props and state.
Day 31: Event Handling in React

Test:
Write a React component that handles user input events.
Explain how event handling in React differs from vanilla JavaScript.
Day 32: React Lifecycle Methods

Test:
Implement lifecycle methods in a class-based React component.
Explain the purpose of each lifecycle method.
Day 33: React Hooks

Test:
Rewrite a class-based component using React hooks.
Explain the benefits of using hooks over class components.
Day 34: Building a Simple React App

Test:
Build a simple React application with multiple components.
Explain the structure and flow of data in your application.
Day 35: Weather App Setup

Test:
Set up the basic structure of the weather application.
Ensure the application fetches data from a weather API.
Week 6: React Advanced Concepts

Day 36: State Management with Hooks

Test:
Manage complex state in a React application using hooks.
Explain how useState and useEffect hooks work together.
Day 37: React Router

Test:
Implement React Router for navigation between different components.
Explain how routing works in a single-page application.
Day 38: Context API

Test:
Use Context API to manage global state in a React application.
Explain the benefits of using Context API over prop drilling.
Day 39: Performance Optimization

Test:
Optimize a React application for better performance.
Explain how memoization and lazy loading improve performance.
Day 40: Testing React Applications

Test:
Write unit tests for React components using Jest and React Testing Library.
Explain the importance of testing in software development.
Day 41: Finalize Weather App

Test:
Add advanced features to the weather application (e.g., forecast, location search).
Ensure all features work as expected.
Day 42: Project Review and Submission

Test:
Submit your weather application for review.
Self-assess your work using the provided rubric.
Week 7-8: Back-End Development with Node.js
Week 7: Node.js & Express Basics

Day 43: Introduction to Node.js

Test:
Set up a basic Node.js server and log a message.
Explain how Node.js differs from traditional web servers.
Day 44: Basic Server Setup

Test:
Create a basic server with Node.js that responds to HTTP requests.
Explain the role of the HTTP module in Node.js.
Day 45: Express.js and Routing

Test:
Set up an Express.js server with basic routing.
Explain the benefits of using Express.js over vanilla Node.js.
Day 46: Middleware in Express.js

Test:
Implement middleware functions in an Express.js application.
Explain the purpose of middleware in Express.js.
Day 47: RESTful API Principles

Test:
Design a RESTful API with Express.js.
Explain the key principles of REST architecture.
Day 48: Building a RESTful API

Test:
Build a RESTful API with CRUD operations using Express.js.
Explain how each HTTP method (GET, POST, PUT, DELETE) is used in a RESTful API.
Day 49: Blogging Platform Setup

Test:
Set up the basic structure of the blogging platform backend.
Explain the database schema and API endpoints.
Week 8: Database Integration & Advanced Express

Day 50: Introduction to MongoDB

Test:
Set up a MongoDB database and connect to it using Node.js.
Explain the difference between relational and NoSQL databases.
Day 51: Connecting to MongoDB

Test:
Connect to a MongoDB database from a Node.js application.
Explain how Mongoose simplifies database interactions.
Day 52: CRUD Operations with MongoDB

Test:
Implement CRUD operations using Mongoose.
Explain how Mongoose models and schemas work.
Day 53: User Authentication

Test:
Implement user authentication using JWT in an Express.js application.
Explain the process of token-based authentication.
Day 54: Securing Express Applications

Test:
Secure an Express.js application with proper error handling and validation.
Explain the importance of security best practices.
Day 55: Finalize Blogging Platform

Test:
Add all necessary features to the blogging platform.
Ensure user authentication and CRUD operations work as expected.
Day 56: Project Review and Submission

Test:
Submit your blogging platform for review.
Self-assess your work using the provided rubric.
Week 9-10: Full Stack Development
Week 9: Full Stack Concepts

Day 57: Authentication & Authorization

Test:
Implement an authentication system with role-based authorization.
Explain the difference between authentication and authorization.
Day 58: Secure Authentication System

Test:
Secure the authentication system with encryption and hashing.
Explain the importance of securing user data.
Day 59: Introduction to WebSockets

Test:
Set up a WebSocket server with Node.js.
Explain how WebSockets enable real-time communication.
Day 60: Real-Time Communication with WebSockets

Test:
Implement a real-time chat application using WebSockets.
Explain the difference between WebSockets and HTTP.
Day 61: RESTful Services & API Design

Test:
Design a RESTful API with proper versioning and documentation.
Explain best practices for designing RESTful services.
Day 62: Integrating Front-End with Back-End

Test:
Integrate a React front-end with a Node.js back-end.
Explain how to handle cross-origin requests (CORS).
Day 63: Chat App Setup

Test:
Set up the basic structure of the real-time chat application.
Ensure basic real-time communication works.
Week 10: DevOps Basics

Day 64: Introduction to Git

Test:
Initialize a Git repository and make initial commits.
Explain the purpose of version control.
Day 65: Basic Git Commands

Test:
Use basic Git commands: add, commit, push, pull.
Explain the difference between merge and rebase.
Day 66: CI/CD Pipelines

Test:
Set up a basic CI/CD pipeline with GitHub Actions.
Explain the benefits of CI/CD in software development.
Day 67: Deploying to Heroku

Test:
Deploy a Node.js application to Heroku.
Explain the process of deploying applications to the cloud.
Day 68: Deploying to Netlify

Test:
Deploy a static site to Netlify.
Explain the difference between static and dynamic site deployment.
Day 69: Finalize Chat App

Test:
Add all necessary features to the real-time chat application.
Ensure all features work as expected.
Day 70: Project Review and Submission

Test:
Submit your chat application for review.
Self-assess your work using the provided rubric.
Week 11-12: Capstone Project & Interview Preparation
Week 11: Capstone Project Development

Day 71: Choose Capstone Project

Test:
Outline your capstone project idea and create a plan.
Explain the purpose and scope of your project.
Day 72: Project Setup

Test:
Set up the repository and initial structure of the capstone project.
Explain the technologies and tools you will use.
Day 73: Backend Development

Test:
Develop the backend for your capstone project.
Ensure the backend is functional and well-documented.
Day 74: Frontend Development

Test:
Develop the frontend for your capstone project.
Ensure the frontend is functional and user-friendly.
Day 75: Integrate Backend and Frontend

Test:
Integrate the backend and frontend of your capstone project.
Ensure data flows seamlessly between the two.
Day 76: Add Advanced Features

Test:
Implement advanced features and optimizations in your project.
Explain how these features improve the project.
Day 77: Testing and Debugging

Test:
Thoroughly test and debug your capstone project.
Ensure all bugs are fixed and the project is stable.
Day 78: Finalize Capstone Project

Test:
Finalize all aspects of your capstone project.
Prepare a presentation of your project.
Week 12: Interview Preparation

Day 79: Resume and Portfolio Review

Test:
Create or update your resume and portfolio.
Ensure both are polished and professional.
Day 80: Coding Interview Practice (Arrays, Strings)

Test:
Solve coding problems related to arrays and strings on LeetCode.
Explain your solutions and approaches.
Day 81: Coding Interview Practice (Linked Lists, Trees)

Test:
Solve coding problems related to linked lists and trees on LeetCode.
Explain your solutions and approaches.
Day 82: System Design Interview Basics

Test:
Study basic system design concepts.
Explain the architecture of a simple system design.
Day 83: Mock Interviews

Test:
Participate in mock interviews.
Receive feedback and improve your interview skills.
Day 84: Final Review and Preparations

Test:
Review all materials and projects.
Ensure you are fully prepared for interviews.
Day 85: Project Presentation and Submission

Test:
Present your capstone project to peers or mentors.
Receive feedback and make final adjustments.
Day 86: Final Day

Test:
Use this day to catch up on any missed work or additional practice.
Reflect on your learning and prepare for the job market.
